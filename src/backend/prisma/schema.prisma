// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  name          String?
  avatar        String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  role          Role      @default(USER)
  
  // Relations
  meditationSessions MeditationSession[]
  favorites          Favorite[]
  progress           Progress[]
  settings           UserSettings?
  soundResources     SoundResource[]
  imageResources     ImageResource[]
  meditationConfigs  MeditationConfig[]
  achievements       UserAchievement[]
  
  @@map("users")
}

// User settings
model UserSettings {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme             String   @default("light")
  notificationsEnabled Boolean @default(true)
  reminderTime      DateTime?
  language          String   @default("en")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("user_settings")
}

// Meditation session model
model MeditationSession {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  duration          Int      // in seconds
  startTime         DateTime
  endTime           DateTime?
  completed         Boolean  @default(false)
  notes             String?
  
  // New fields for Sprint 1
  backgroundImageId String?
  backgroundImage   ImageResource? @relation("SessionBackground", fields: [backgroundImageId], references: [id], onDelete: SetNull)
  startSoundId      String?
  startSound        SoundResource? @relation("SessionStartSound", fields: [startSoundId], references: [id], onDelete: SetNull)
  endSoundId        String?
  endSound          SoundResource? @relation("SessionEndSound", fields: [endSoundId], references: [id], onDelete: SetNull)
  
  // Periodic chime settings
  periodicChimeEnabled Boolean @default(false)
  periodicChimeInterval Int?    // in seconds
  periodicChimeSoundId String?
  periodicChimeSound   SoundResource? @relation("SessionPeriodicSound", fields: [periodicChimeSoundId], references: [id], onDelete: SetNull)
  
  // Configuration reference
  configId          String?
  config            MeditationConfig? @relation(fields: [configId], references: [id], onDelete: SetNull)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("meditation_sessions")
}

// Meditation configuration model
model MeditationConfig {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name              String
  isDefault         Boolean  @default(false)
  
  // Configuration settings
  backgroundImageId String?
  backgroundImage   ImageResource? @relation(fields: [backgroundImageId], references: [id], onDelete: SetNull)
  startSoundId      String?
  startSound        SoundResource? @relation(fields: [startSoundId], references: [id], onDelete: SetNull)
  endSoundId        String?
  endSound          SoundResource? @relation(fields: [endSoundId], references: [id], onDelete: SetNull)
  
  // Periodic chime settings
  periodicChimeEnabled Boolean @default(false)
  periodicChimeInterval Int?    // in seconds
  periodicChimeSoundId String?
  periodicChimeSound   SoundResource? @relation(fields: [periodicChimeSoundId], references: [id], onDelete: SetNull)
  
  // Sessions using this config
  sessions          MeditationSession[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("meditation_configs")
}

// Sound resource model
model SoundResource {
  id          String   @id @default(uuid())
  name        String
  url         String
  duration    Int?     // in seconds
  isSystem    Boolean  @default(false)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sessionStartSounds      MeditationSession[] @relation("SessionStartSound")
  sessionEndSounds        MeditationSession[] @relation("SessionEndSound")
  sessionPeriodicSounds   MeditationSession[] @relation("SessionPeriodicSound")
  configStartSounds       MeditationConfig[] @relation("ConfigStartSound")
  configEndSounds         MeditationConfig[] @relation("ConfigEndSound")
  configPeriodicSounds    MeditationConfig[] @relation("ConfigPeriodicSound")
  
  @@map("sound_resources")
}

// Image resource model
model ImageResource {
  id          String   @id @default(uuid())
  name        String
  url         String
  isSystem    Boolean  @default(false)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  sessionBackgrounds      MeditationSession[] @relation("SessionBackground")
  configBackgrounds       MeditationConfig[] @relation("ConfigBackground")
  
  @@map("image_resources")
}

// Meditation content model
model MeditationContent {
  id          String   @id @default(uuid())
  title       String
  description String?
  audioUrl    String
  duration    Int      // in seconds
  level       Level    @default(BEGINNER)
  category    String
  teacher     String?
  isPublic    Boolean  @default(true)
  isPremium   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  favorites   Favorite[]
  progress    Progress[]
  
  @@map("meditation_contents")
}

// Buddhist content model
model BuddhistContent {
  id          String   @id @default(uuid())
  title       String
  description String?
  contentType ContentType
  content     String?  // For text content
  audioUrl    String?  // For audio content
  videoUrl    String?  // For video content
  author      String?
  source      String?
  isPublic    Boolean  @default(true)
  isPremium   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  favorites   Favorite[]
  progress    Progress[]
  
  @@map("buddhist_contents")
}

// Favorite model
model Favorite {
  id                  String   @id @default(uuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  meditationContentId String?
  meditationContent   MeditationContent? @relation(fields: [meditationContentId], references: [id], onDelete: SetNull)
  buddhistContentId   String?
  buddhistContent     BuddhistContent? @relation(fields: [buddhistContentId], references: [id], onDelete: SetNull)
  createdAt           DateTime @default(now())
  
  @@unique([userId, meditationContentId])
  @@unique([userId, buddhistContentId])
  @@map("favorites")
}

// Progress model
model Progress {
  id                  String   @id @default(uuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  meditationContentId String?
  meditationContent   MeditationContent? @relation(fields: [meditationContentId], references: [id], onDelete: SetNull)
  buddhistContentId   String?
  buddhistContent     BuddhistContent? @relation(fields: [buddhistContentId], references: [id], onDelete: SetNull)
  progress            Float    @default(0) // 0-100%
  lastPosition        Int      @default(0) // in seconds for audio/video
  completed           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@unique([userId, meditationContentId])
  @@unique([userId, buddhistContentId])
  @@map("progress")
}

// Achievement model
model Achievement {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  iconUrl     String
  type        AchievementType
  threshold   Int      // Value needed to earn achievement
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userAchievements UserAchievement[]
  
  @@map("achievements")
}

// User Achievement model
model UserAchievement {
  id            String     @id @default(uuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  earnedAt      DateTime   @default(now())
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// Enums
enum Role {
  USER
  CONTENT_MANAGER
  TEACHER
  ADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  TEXT
  AUDIO
  VIDEO
}

enum AchievementType {
  TOTAL_SESSIONS
  TOTAL_MINUTES
  STREAK_DAYS
  CONSECUTIVE_DAYS
}